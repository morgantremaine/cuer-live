
import React, { useMemo } from 'react';
import RundownContainer from '@/components/RundownContainer';
import CuerChatButton from '@/components/cuer/CuerChatButton';
import { useRundownGridState } from '@/hooks/useRundownGridState';
import { useIndexHandlers } from '@/hooks/useIndexHandlers';

const RundownIndexContent = () => {
  const gridState = useRundownGridState();
  
  // Extract only the values we need to prevent dependency loops
  const {
    currentTime,
    timezone,
    showColumnManager,
    setShowColumnManager,
    rundownTitle,
    setRundownTitle,
    rundownStartTime,
    rundownId,
    items,
    visibleColumns,
    columns,
    showColorPicker,
    cellRefs,
    selectedRows,
    draggedItemIndex,
    isDraggingMultiple,
    dropTargetIndex,
    currentSegmentId,
    getColumnWidth,
    updateColumnWidth,
    getRowNumber,
    getRowStatus,
    calculateHeaderDuration,
    updateItem,
    handleCellClick,
    handleKeyDown,
    handleToggleColorPicker,
    selectColor,
    deleteRow,
    toggleFloatRow,
    toggleRowSelection,
    handleDragStart,
    handleDragOver,
    handleDragLeave,
    handleDrop,
    addRow,
    addHeader,
    hasClipboardData,
    clearSelection,
    isPlaying,
    timeRemaining,
    play,
    pause,
    forward,
    backward,
    handleAddColumn,
    handleReorderColumns,
    handleDeleteColumn,
    handleRenameColumn,
    handleToggleColumnVisibility,
    handleLoadLayout,
    hasUnsavedChanges,
    isSaving,
    calculateTotalRuntime,
    calculateEndTime,
    markAsChanged,
    handleCopySelectedRows,
    handlePasteRows,
    handleDeleteSelectedRows,
    setRundownStartTime,
    setTimezone
  } = gridState;

  const {
    handleRundownStartTimeChange,
    handleTimezoneChange,
    handleOpenTeleprompter,
    handleRowSelect,
    handleAddRow,
    handleAddHeader
  } = useIndexHandlers({
    items,
    selectedRows,
    rundownId,
    addRow,
    addHeader,
    calculateEndTime,
    toggleRowSelection,
    setRundownStartTime,
    setTimezone,
    markAsChanged
  });

  const selectedRowsArray = Array.from(selectedRows);
  const selectedRowId = selectedRowsArray.length === 1 ? selectedRowsArray[0] : null;

  // Prepare rundown data for Cuer AI
  const rundownData = useMemo(() => ({
    id: rundownId,
    title: rundownTitle,
    startTime: rundownStartTime,
    timezone: timezone,
    items: items,
    columns: columns,
    totalRuntime: calculateTotalRuntime()
  }), [rundownId, rundownTitle, rundownStartTime, timezone, items, columns, calculateTotalRuntime]);

  // Memoize the container props to prevent unnecessary re-renders
  const containerProps = useMemo(() => ({
    currentTime,
    timezone,
    onTimezoneChange: handleTimezoneChange,
    totalRuntime: calculateTotalRuntime(),
    showColumnManager,
    setShowColumnManager,
    items,
    visibleColumns,
    columns,
    showColorPicker,
    cellRefs,
    selectedRows,
    draggedItemIndex,
    isDraggingMultiple,
    dropTargetIndex,
    currentSegmentId,
    getColumnWidth,
    updateColumnWidth,
    getRowNumber,
    getRowStatus,
    calculateHeaderDuration,
    onUpdateItem: updateItem,
    onCellClick: handleCellClick,
    onKeyDown: handleKeyDown,
    onToggleColorPicker: handleToggleColorPicker,
    onColorSelect: selectColor,
    onDeleteRow: deleteRow,
    onToggleFloat: toggleFloatRow,
    onRowSelect: handleRowSelect,
    onDragStart: handleDragStart,
    onDragOver: handleDragOver,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop,
    onAddRow: handleAddRow,
    onAddHeader: handleAddHeader,
    selectedCount: selectedRows.size,
    hasClipboardData,
    onCopySelectedRows: handleCopySelectedRows,
    onPasteRows: handlePasteRows,
    onDeleteSelectedRows: handleDeleteSelectedRows,
    onClearSelection: clearSelection,
    selectedRowId,
    isPlaying,
    timeRemaining,
    onPlay: play,
    onPause: pause,
    onForward: forward,
    onBackward: backward,
    handleAddColumn,
    handleReorderColumns,
    handleDeleteColumnWithCleanup: handleDeleteColumn,
    handleRenameColumn,
    handleToggleColumnVisibility,
    handleLoadLayout,
    hasUnsavedChanges,
    isSaving,
    rundownTitle,
    onTitleChange: setRundownTitle,
    rundownStartTime,
    onRundownStartTimeChange: handleRundownStartTimeChange,
    rundownId,
    onOpenTeleprompter: handleOpenTeleprompter
  }), [
    currentTime,
    timezone,
    handleTimezoneChange,
    calculateTotalRuntime,
    showColumnManager,
    setShowColumnManager,
    items,
    visibleColumns,
    columns,
    showColorPicker,
    cellRefs,
    selectedRows,
    draggedItemIndex,
    isDraggingMultiple,
    dropTargetIndex,
    currentSegmentId,
    getColumnWidth,
    updateColumnWidth,
    getRowNumber,
    getRowStatus,
    calculateHeaderDuration,
    updateItem,
    handleCellClick,
    handleKeyDown,
    handleToggleColorPicker,
    selectColor,
    deleteRow,
    toggleFloatRow,
    handleRowSelect,
    handleDragStart,
    handleDragOver,
    handleDragLeave,
    handleDrop,
    handleAddRow,
    handleAddHeader,
    hasClipboardData,
    handleCopySelectedRows,
    handlePasteRows,
    handleDeleteSelectedRows,
    clearSelection,
    selectedRowId,
    isPlaying,
    timeRemaining,
    play,
    pause,
    forward,
    backward,
    handleAddColumn,
    handleReorderColumns,
    handleDeleteColumn,
    handleRenameColumn,
    handleToggleColumnVisibility,
    handleLoadLayout,
    hasUnsavedChanges,
    isSaving,
    rundownTitle,
    setRundownTitle,
    rundownStartTime,
    handleRundownStartTimeChange,
    rundownId,
    handleOpenTeleprompter
  ]);

  return (
    <>
      <RundownContainer {...containerProps} />
      
      {/* Cuer AI Chat Button with rundown data */}
      <CuerChatButton rundownData={rundownData} />
    </>
  );
};

export default RundownIndexContent;
