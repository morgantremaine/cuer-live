
import { useCallback, useState, useRef } from 'react';
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useRundownStorage } from './useRundownStorage';
import { RundownItem } from './useRundownItems';
import { Column } from './useColumnsManager';

export const useAutoSaveOperations = () => {
  const params = useParams<{ id: string }>();
  const navigate = useNavigate();
  const rundownId = (!params.id || params.id === 'new' || params.id === ':id' || params.id.trim() === '') ? undefined : params.id;
  const { updateRundown, saveRundown } = useRundownStorage();
  const [isSaving, setIsSaving] = useState(false);
  const hasCreatedRundownRef = useRef(false);
  const createdRundownIdRef = useRef<string | null>(null);

  const performSave = useCallback(async (
    items: RundownItem[], 
    title: string, 
    columns?: Column[], 
    timezone?: string, 
    startTime?: string,
    skipRealtimeUpdate: boolean = false
  ): Promise<boolean> => {
    console.log('💾 Auto-saving rundown...', { 
      itemCount: items.length, 
      title,
      timezone,
      startTime,
      skipRealtimeUpdate,
      hasRundownId: !!rundownId,
      hasCreatedRundown: hasCreatedRundownRef.current,
      createdId: createdRundownIdRef.current
    });

    // Check if we're on dashboard - don't auto-save from there
    if (window.location.pathname === '/' || window.location.pathname === '/dashboard') {
      console.log('⏭️ Skipping auto-save from dashboard page');
      return false;
    }

    // Prevent duplicate creation by checking if we're already in the process
    if (isSaving) {
      console.log('⏭️ Skipping auto-save - already saving');
      return false;
    }

    // If we already created a rundown but the URL hasn't updated yet, skip
    if (!rundownId && createdRundownIdRef.current) {
      console.log('⏭️ Skipping auto-save - waiting for URL update after creation');
      return false;
    }

    setIsSaving(true);
    
    try {
      if (rundownId && rundownId !== 'new') {
        // Update existing rundown
        await updateRundown(
          rundownId,
          title,
          items,
          true, // silent save
          false, // not archived
          columns,
          timezone,
          startTime
        );
        console.log('✅ Updated existing rundown:', rundownId);
      } else if (!hasCreatedRundownRef.current) {
        // Create new rundown only if we haven't already created one
        console.log('🆕 Creating new rundown for the first time');
        hasCreatedRundownRef.current = true;
        
        const newRundown = {
          id: '', // Will be generated by database
          title,
          items,
          columns: columns || [],
          timezone: timezone || 'America/New_York',
          start_time: startTime || '09:00:00',
          user_id: '', // Will be set by saveRundown
          team_id: '', // Will be set by saveRundown
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          archived: false,
          icon: null,
          visibility: 'private' as const,
          undo_history: [],
          teams: null,
          creator_profile: null
        };

        const newRundownId = await saveRundown(newRundown);
        
        if (newRundownId) {
          createdRundownIdRef.current = newRundownId;
          console.log('✅ Created new rundown:', newRundownId);
          
          // Update the URL to reflect the new rundown ID
          const newUrl = `/rundown/${newRundownId}`;
          navigate(newUrl, { replace: true });
          console.log('🔄 Navigated to:', newUrl);
        }
      } else {
        console.log('⏭️ Skipping creation - rundown already created');
      }
      
      console.log('✅ Auto-save successful');
      return true;
    } catch (error) {
      console.error('❌ Auto-save failed:', error);
      // Reset the creation flag if save failed
      if (!rundownId) {
        hasCreatedRundownRef.current = false;
        createdRundownIdRef.current = null;
      }
      return false;
    } finally {
      setIsSaving(false);
    }
  }, [rundownId, updateRundown, saveRundown, navigate, isSaving]);

  // Reset tracking when rundown ID changes
  React.useEffect(() => {
    if (rundownId && rundownId !== 'new' && rundownId !== createdRundownIdRef.current) {
      console.log('🔄 Rundown ID changed, resetting creation tracking');
      hasCreatedRundownRef.current = false;
      createdRundownIdRef.current = null;
    }
  }, [rundownId]);

  return {
    isSaving,
    performSave
  };
};
