
import { useCallback, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useRundownStorage } from './useRundownStorage';
import { RundownItem } from './useRundownItems';
import { Column } from './useColumnsManager';

export const useAutoSaveOperations = () => {
  const params = useParams<{ id: string }>();
  const navigate = useNavigate();
  const rundownId = (!params.id || params.id === 'new' || params.id === ':id' || params.id.trim() === '') ? undefined : params.id;
  const { updateRundown, saveRundown } = useRundownStorage();
  const [isSaving, setIsSaving] = useState(false);

  const performSave = useCallback(async (
    items: RundownItem[], 
    title: string, 
    columns?: Column[], 
    timezone?: string, 
    startTime?: string,
    skipRealtimeUpdate: boolean = false
  ): Promise<boolean> => {
    console.log('üíæ Auto-saving rundown...', { 
      itemCount: items.length, 
      title,
      timezone,
      startTime,
      skipRealtimeUpdate,
      hasRundownId: !!rundownId 
    });

    // Check if we're on dashboard - don't auto-save from there
    if (window.location.pathname === '/' || window.location.pathname === '/dashboard') {
      console.log('‚è≠Ô∏è Skipping auto-save from dashboard page');
      return false;
    }

    setIsSaving(true);
    
    try {
      if (rundownId) {
        // Update existing rundown
        await updateRundown(
          rundownId,
          title,
          items,
          true, // silent save
          false, // not archived
          columns,
          timezone,
          startTime
        );
      } else {
        // Create new rundown
        const newRundown = {
          id: '', // Will be generated by database
          title,
          items,
          columns: columns || [],
          timezone: timezone || 'America/New_York',
          start_time: startTime || '09:00:00',
          user_id: '', // Will be set by saveRundown
          team_id: '', // Will be set by saveRundown
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          archived: false,
          icon: null,
          visibility: 'private' as const,
          undo_history: [],
          teams: null,
          creator_profile: null
        };

        const newRundownId = await saveRundown(newRundown);
        
        // Update the URL to reflect the new rundown ID
        if (newRundownId) {
          navigate(`/rundown/${newRundownId}`, { replace: true });
        }
      }
      
      console.log('‚úÖ Auto-save successful');
      return true;
    } catch (error) {
      console.error('‚ùå Auto-save failed:', error);
      return false;
    } finally {
      setIsSaving(false);
    }
  }, [rundownId, updateRundown, saveRundown, navigate]);

  return {
    isSaving,
    performSave
  };
};
